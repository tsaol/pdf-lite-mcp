name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.10'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync

    - name: Lint with ruff (if available)
      run: |
        if command -v ruff &> /dev/null; then
          uv run ruff check .
        else
          echo "Ruff not found, skipping linting"
        fi
      continue-on-error: true

    - name: Check Python syntax
      run: |
        find src tests -name "*.py" -exec python -m py_compile {} \;

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync

    - name: Run simple tests
      run: uv run python tests/simple_test.py

    - name: Run basic tests
      run: uv run python tests/test_basic.py

    - name: Run server tests
      run: uv run python tests/test_server.py

    - name: Run PDF processing tests (with network)
      run: uv run python tests/test_with_pdf.py
      continue-on-error: true  # Network tests may fail in CI

    - name: Test MCP server startup
      run: timeout 10s uv run python src/main.py || echo "Server startup test completed"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync

    - name: Run Bandit security scan
      run: |
        if command -v bandit &> /dev/null; then
          uv run bandit -r src/
        else
          echo "Bandit not found, installing and running"
          uv add --dev bandit
          uv run bandit -r src/
        fi
      continue-on-error: true

    - name: Check for known vulnerabilities
      run: |
        if command -v safety &> /dev/null; then
          uv run safety check
        else
          echo "Safety not found, skipping vulnerability check"
        fi
      continue-on-error: true

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync

    - name: Build package
      run: uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 7

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: tsaol/pdf-reader-mcp
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: PyPI Release
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release
    permissions:
      id-token: write  # Required for PyPI trusted publishing
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: always()
    steps:
    - name: Notify on success
      if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' }}
      run: echo "✅ All checks passed successfully!"

    - name: Notify on failure
      if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: echo "❌ Some checks failed. Please review the logs."